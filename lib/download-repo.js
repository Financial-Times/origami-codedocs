'use strict';

const got = require('got');
const getNpmTarballUrl = require('get-npm-tarball-url').default;
const untar = require('decompress');
const fs = require('fs');
const path = require('path');
const tmpDir = require('os').tmpdir();
const { URL } = require('url');

/**
 * @param {string} name - project name 'o-table'
 * @param {string} version - project version '8.0.0'
 * @param {string} repoUrl - the url for the project repository
 * @param {number} tarballRequestTimeout - github request timeout in milliseconds
 * @returns {stream.Writable}
 */
function getGithubTarballStream(name, version, repoUrl, tarballRequestTimeout) {
    const githubUrl = new URL(repoUrl);
    const expectedGitHost = 'github.com';
    if (githubUrl.host !== expectedGitHost) {
        throw new Error(`Could not download repo from "${repoUrl}". Only ${expectedGitHost} is supported."`);
    }
    const githubOrganisation = githubUrl.pathname.split('/').find(path => path);
    return got.stream(`https://api.github.com/repos/${githubOrganisation}/${name}/tarball/${version}`, {
        timeout: {
            response: tarballRequestTimeout
        },
        decompress: true,
        headers: { 'User-Agent': 'OrigamiCodedocsService' }
    });
}

/**
 * @param {string} npmTarballURL - url to download tarball from
 * @param {number} tarballRequestTimeout - npm request timeout in milliseconds
 * @returns {stream.Writable}
 */
function getNpmTarballStream(npmTarballURL, tarballRequestTimeout) {
    // Validate the npm host is as expected, this is generated by a 3rd-party
    // library at the time of writing.
    const expectedNpmHost = 'registry.npmjs.org';
    if (new URL(npmTarballURL).host !== expectedNpmHost) {
        throw new Error(`Could not download repo from npm using "${npmTarballURL}", is this correct? Expected "${expectedNpmHost}"."`);
    }
    return got.stream(npmTarballURL, {
        timeout: {
            response: tarballRequestTimeout
        },
        decompress: true,
        headers: { 'User-Agent': 'OrigamiCodedocsService' }
    });
}





module.exports = async (repoUrl, name, version, language) => {

    const npmTarballURL = getNpmTarballUrl(`@financial-times/${name}`, version);
    const response = await got.head(npmTarballURL, { throwHttpErrors: false });
    const npmTarball = response.statusCode !== 404;

    return await new Promise((resolve, reject) => {
        const tarPath = path.join(tmpDir, 'component.tar');
        const file = fs.createWriteStream(tarPath);
        const tarballRequestTimeout = 20000; // Leave time for function to complete on error for healthcheck runs.

        // Origami components have moved under one repository `Financial-Times/origami`.
        // New versions must be downloaded via npm and not Github.
        // We can't trust the `repoUrl` due to a bug in Origami Repo Data which
        // we may never fix before it is decommissioned, so instead use npm
        // and fall back to github.
        // https://github.com/Financial-Times/origami-repo-data/blob/5c49fa79697b339b76b60ac22b6bd88313e7ffc0/lib/create-version-from-ingestion/index.js#L238
        const stream = npmTarball ?
            getNpmTarballStream(npmTarballURL, tarballRequestTimeout) :
            getGithubTarballStream(name, version, repoUrl, tarballRequestTimeout);

        const fileStream = stream.pipe(file);

        fileStream.on('error', error => reject(error));
        fileStream.on('finish', () => {
            const filterRegex = new RegExp(`^(?:[^\/]*)\/(?:lib\/|src\/|main\.${language}|origami\.json)`, 'g');
            untar(tarPath, tmpDir, {
                filter: file => {
                    return file.path && file.path.match(filterRegex);
                }
            }).then(files => {
                const origamiJsonPath = files.find((file) => file.path && file.path.includes('origami.json')).path;
                resolve(path.join(tmpDir, path.dirname(origamiJsonPath)));
            }, error => reject(error));
        });
    });
};
